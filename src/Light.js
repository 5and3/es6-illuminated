import Vec2 from './Vec2.js'
import { createCanvasAnd2dContext } from './helpers.js'

/**
 * Abstract class for light objects.
 */
class Light {
    /**
     * Create new instance of light but prevent direct instantiation.
     * @param {Object} options Options to be applied to this light.
     */
    constructor(options) {
        const defaults = {
            /** 
             * @property position
             * @type Vec2
             * @default new Vec2(0, 0)
            */
            position: new Vec2(),

            /**
             * Intensity of this light.
             * @property distance
             * @type Number
             * @default 100
            */
            distance: 100,

            /**
             * How diffuse this light is.
             * @property diffuse
             * @type Number
             * @default 0.8
             */
            diffuse: 0.8
        }

        this.options = Object.assign(defaults, options)
    }

    /**
     * Render the light onto the provided context.
     * @param {CanvasRenderingContext2D} ctx The canvas context on which to render the light.
     */
    render() {}

    /**
     * Render a mask representing the visibility. (Used by DarkMask.)
     * @param {CanvasRenderingContext2D} ctx The canvas contect on which to render the mask.
     */
    mask(ctx) {
        var c = this._getVisibleMaskCache()
        ctx.drawImage(
            c.canvas,
            Math.round(this.options.position.x - c.w / 2),
            Math.round(this.options.position.y - c.h / 2)
        )
    }

    /**
     * Calculate the boundaries of this light using the light's distance.
     * @return {Object} An anonymous object representing the corners of the boundary.
     */
    bounds() {
        return {
            topleft: new Vec2(this.options.position.x - this.options.distance, this.options.position.y - this.options.distance),
            bottomright: new Vec2(this.options.position.x + this.options.distance, this.options.position.y + this.options.distance)
        }
    }

    /**
     * Return the center of this light.
     * i.e. The position where the light intensity is the highest.
     * @return {Vec2} A vector that represents the center of this light.
     */
    center() {
        return new Vec2(this.options.distance, this.options.distance)
    }

    /**
     * Invoke a function for every sample generated by this light.
     * @param {Function} f Function to be called for every sample with a vector representing its position.
     */
    forEachSample(f) {
        f(this.options.position)
    }

    /**
     * Creates a canvas context with the visible mask rendered onto it.
     * @return {CanvasRenderingContext2D} A canvas context with the visible mask rendered onto it.
     */
    _getVisibleMaskCache() {
        var d = Math.floor(this.options.distance * 1.4)
        var hash = '' + d
        if (this.vismaskhash != hash) {
            this.vismaskhash = hash
            var c = this._vismaskcache = createCanvasAnd2dContext('vm' + this.id, 2 * d, 2 * d)
            var g = c.ctx.createRadialGradient(d, d, 0, d, d, d)
            g.addColorStop(0, 'rgba(0,0,0,1)')
            g.addColorStop(1, 'rgba(0,0,0,0)')
            c.ctx.fillStyle = g
            c.ctx.fillRect(0, 0, c.w, c.h)
        }
        return this._vismaskcache
    }

    /**
     * Return a string hash key representing this light.
     * @return {String} The hash key.
     */
    _getHashCache() {
        return [this.options.distance, this.options.diffuse].toString()
    }
}

export default Light